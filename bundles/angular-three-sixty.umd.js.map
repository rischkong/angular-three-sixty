{"version":3,"file":"angular-three-sixty.umd.js","sources":["../../node_modules/@mediaman/three-sixty/src/image-loader.ts","../../node_modules/@mediaman/three-sixty/src/three-sixty.ts","../../build/src/three-sixty.factory.ts","../../build/src/three-sixty.component.ts","../../build/src/three-sixty.module.ts"],"sourcesContent":["export class ImageLoader {\n\n    /**\n     * @type {{[string]: Image}}\n     */\n    private cache: any = {};\n\n    /**\n     * Load an image\n     *\n     * @param {string} url\n     * @returns {Promise<Image>}\n     */\n    public load(url: string): Promise<any> {\n        return new Promise((resolve) => {\n            if (this.cache.hasOwnProperty(url)) {\n                return resolve(this.cache[url]);\n            }\n\n            const image = new Image();\n\n            image.onload = () => {\n                this.cache[url] = image;\n\n                resolve(image);\n            };\n\n            image.src = url;\n        });\n    }\n}\n","import { ConfigurationInterface } from './interfaces/configuration.interface';\nimport { ImageLoader } from './image-loader';\nimport { HotspotInterface } from './interfaces/hotspot.interface';\nimport { ImageSetInterface } from './interfaces/image-set.interface';\nconst Hammer = require('hammerjs');\n\nexport default class ThreeSixty {\n\n    /**\n     * @type {string}\n     */\n    public static CONTAINER_CLASS = 'three-sixty-container';\n\n    /**\n     * @type {string}\n     */\n    public static HOTSPOT_CLASS = 'three-sixty__hotspot';\n\n    /**\n     * @type {string}\n     */\n    public static HOTSPOT_ACTIVE_CLASS = 'three-sixty__hotspot--active';\n\n    /**\n     * Array of image sprites\n     *\n     * @type {string[]}\n     */\n    private images: string[];\n\n    /**\n     * Image configuration\n     *\n     * @type {ImageSetInterface}\n     */\n    private imageSet: ImageSetInterface;\n\n    /**\n     * @type {Hammer}\n     */\n    private hammer: any;\n\n    /**\n     * @type {HTMLElement}\n     */\n    private containerElement: HTMLElement;\n\n    /**\n     * @type {HTMLElement[]}\n     */\n    private hotspotElements: HTMLElement[] = [];\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    private canvas2dContext: CanvasRenderingContext2D;\n\n    /**\n     * @type {ImageLoader}\n     */\n    private imageLoader: ImageLoader;\n\n    /**\n     * Angle of the current image\n     * Number between 0 and 360\n     *\n     * @type {number}\n     */\n    private angle: number = 0;\n\n    /**\n     * Angle of the image before the drag process began\n     *\n     * @type {number}\n     */\n    private preDragAngle: number = 0;\n\n    /**\n     * @param {HTMLCanvasElement} canvasElement\n     * @param {ConfigurationInterface} configuration\n     */\n    constructor(private canvasElement: HTMLCanvasElement, private configuration: ConfigurationInterface) {\n        this.canvas2dContext = this.canvasElement.getContext('2d') as CanvasRenderingContext2D;\n        this.imageLoader = new ImageLoader();\n\n        window.onresize = () => this.images = this.getActiveImages();\n    }\n\n    /**\n     * Initialize the three sixty widget\n     *\n     * @param {ImageSetInterface} imageSet - Array of image sprites\n     * @param {number} startAngle - The initial angle to show (number between 0 and 360)\n     */\n    public initialize(imageSet: ImageSetInterface, startAngle: number = 0) {\n        if (startAngle < 0 || startAngle > 360) {\n            throw new Error('The specified start angle must be between 0 and 360.');\n        }\n\n        this.angle = startAngle;\n        this.imageSet = imageSet;\n        this.images = this.getActiveImages();\n\n        // Wrap the canvas element\n        this.containerElement = document.createElement('div');\n        this.containerElement.classList.add(ThreeSixty.CONTAINER_CLASS);\n        (this.canvasElement.parentElement as HTMLElement).insertBefore(this.containerElement, this.canvasElement);\n        this.containerElement.appendChild(this.canvasElement);\n\n        this.initializeHotspots();\n        this.initializeEventListeners();\n\n        const imageIndexes = this.getImageIndexesForCurrentAngle();\n\n        this.imageLoader.load(this.images[imageIndexes.targetSpriteIndex])\n            .then((image) => this.drawAngle(image, imageIndexes.targetImageIndex));\n    }\n\n    /**\n     * Update the configuration and re-render the hotspots\n     *\n     * @param {ConfigurationInterface} configuration\n     */\n    public updateConfiguration(configuration: ConfigurationInterface) {\n        this.configuration = configuration;\n\n        this.hotspotElements.forEach((hotspotElement: HTMLElement) => hotspotElement.parentElement.removeChild(hotspotElement));\n        this.hotspotElements = [];\n\n        this.initializeHotspots();\n    }\n\n    /**\n     * Update and re-render the images\n     *\n     * @param {ImageSetInterface} imageSet\n     */\n    public updateImages(imageSet: ImageSetInterface) {\n        this.imageSet = imageSet;\n        this.images = this.getActiveImages();\n\n        const imageIndexes = this.getImageIndexesForCurrentAngle();\n\n        this.imageLoader.load(this.images[imageIndexes.targetSpriteIndex])\n            .then((image) => this.drawAngle(image, imageIndexes.targetImageIndex));\n    }\n\n    /**\n     * Preload all images\n     *\n     * @returns {Promise<null>}\n     */\n    public preload(): Promise<null> {\n        return new Promise((resolve) => {\n            let imagesLoaded = 0;\n\n            /**\n             * Preload a single image\n             * Resolve the Promise if all images were loaded\n             *\n             * @param {string} url\n             */\n            const preloadImage = (url: string) => {\n                this.imageLoader.load(url)\n                    .then(() => {\n                        imagesLoaded++;\n\n                        if (imagesLoaded === this.images.length) {\n                            resolve();\n                        }\n                    });\n            };\n\n            this.images.forEach(preloadImage.bind(this));\n        });\n    }\n\n    /**\n     * Get the active images for the current browser width\n     *\n     * @returns {string[]}\n     */\n    private getActiveImages(): string[] {\n        const width = window.outerWidth;\n        const breakpoints = Object.keys(this.imageSet);\n\n        const activeBreakpoint = breakpoints.sort().reverse().find((breakpoint: string) => {\n            if (parseFloat(breakpoint) <= width) {\n                return true;\n            }\n        });\n        return this.imageSet[activeBreakpoint];\n    }\n\n    /**\n     * Initialize the hotspots\n     */\n    private initializeHotspots() {\n        if (this.configuration.hotspots) {\n            this.configuration.hotspots.forEach((hotspot: HotspotInterface) => {\n                const hotspotElement = document.createElement('div');\n\n                hotspotElement.classList.add(ThreeSixty.HOTSPOT_CLASS);\n                hotspotElement.innerText = hotspot.text;\n\n                if (hotspot.top) {\n                    hotspotElement.style.top = hotspot.top;\n                }\n                if (hotspot.left) {\n                    hotspotElement.style.left = hotspot.left;\n                }\n\n                this.hotspotElements.push(hotspotElement);\n            });\n            this.hotspotElements.forEach((hotSpotElement) => this.containerElement.appendChild(hotSpotElement));\n\n            this.showActiveHotspots();\n        }\n    }\n\n    /**\n     * Show the active hotspots\n     */\n    private showActiveHotspots() {\n        if (this.configuration.hotspots) {\n            this.configuration.hotspots.forEach((hotspot: HotspotInterface, i: number) => {\n                if (hotspot.angle <= this.angle && hotspot.endAngle >= this.angle) {\n                    this.hotspotElements[i].classList.add(ThreeSixty.HOTSPOT_ACTIVE_CLASS);\n                } else {\n                    this.hotspotElements[i].classList.remove(ThreeSixty.HOTSPOT_ACTIVE_CLASS);\n                }\n            });\n        }\n    }\n\n    /**\n     * Initialize the event listeners\n     */\n    private initializeEventListeners() {\n        this.hammer = new Hammer(this.canvasElement);\n\n        this.hammer.get('pan').set({direction: Hammer.DIRECTION_HORIZONTAL, threshold: 0});\n\n        this.hammer.on('pan', this.onDrag.bind(this));\n        this.hammer.on('panstart', this.onDragStart.bind(this));\n    }\n\n    /**\n     * Get the target image indexes for the current angle\n     */\n    private getImageIndexesForCurrentAngle(): {targetImageIndex: number, targetSpriteIndex: number} {\n        let targetImageIndex = Math.round(this.angle / (360 / this.configuration.angles));\n        let targetSpriteIndex = Math.floor(targetImageIndex / this.configuration.anglesPerImage);\n\n        return {targetImageIndex: targetImageIndex % this.configuration.anglesPerImage, targetSpriteIndex};\n    }\n\n    /**\n     * Draw a specific angle\n     *\n     * @param {Image} image\n     * @param {number} imageIndex\n     */\n    private drawAngle(image: any, imageIndex: number) {\n        let loaded = false;\n\n        const _drawAngle = () => {\n            this.canvas2dContext.drawImage(\n                image,\n                0,\n                -this.canvasElement.height * imageIndex,\n                this.canvasElement.width,\n                this.canvasElement.height * this.configuration.anglesPerImage\n            );\n\n            if (!loaded) {\n                window.requestAnimationFrame(_drawAngle.bind(this));\n\n                loaded = true;\n            }\n        };\n\n        window.requestAnimationFrame(_drawAngle.bind(this));\n    }\n\n    /**\n     * Drag the angle\n     *\n     * @param {{deltaX: number}} e\n     */\n    private onDrag(e: {deltaX: number}) {\n\n        // Calculate new image angle\n        this.adaptAngle(-e.deltaX);\n\n        const imageIndexes = this.getImageIndexesForCurrentAngle();\n\n        // Load and render new image angle\n        this.imageLoader.load(this.images[imageIndexes.targetSpriteIndex])\n            .then((image) => this.drawAngle(image, (imageIndexes.targetImageIndex)));\n\n        this.showActiveHotspots();\n    }\n\n    /**\n     * Cache the angle before the drag starts\n     */\n    private onDragStart() {\n        this.preDragAngle = this.angle;\n    }\n\n    /**\n     * Recalculate the canvas angle\n     *\n     * @param {number} distance\n     */\n    private adaptAngle(distance: number) {\n        distance = Math.ceil(distance * (this.configuration.speedFactor ? this.configuration.speedFactor : 5));\n\n        const width = window.innerWidth;\n        const dx = (distance / width);\n        let tmpAngle = ((1 - (this.preDragAngle / 360)) + dx * 1.5);\n\n        while (tmpAngle < 0) {\n            tmpAngle++;\n        }\n\n        tmpAngle = tmpAngle % 1;\n\n        this.angle = -360 * tmpAngle + 360;\n    }\n}\n","import ThreeSixty from '@mediaman/three-sixty';\nimport { ConfigurationInterface } from '@mediaman/three-sixty/dist/interfaces/configuration.interface';\n\nexport class ThreeSixtyFactory {\n\n    /**\n     * @param canvasElement\n     * @param configuration\n     */\n    public create(canvasElement: HTMLCanvasElement, configuration: ConfigurationInterface): ThreeSixty {\n        return new ThreeSixty(canvasElement, configuration);\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    ViewChild,\n    Input,\n    OnInit,\n    Output,\n    EventEmitter,\n    ViewEncapsulation,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { ThreeSixtyFactory } from './three-sixty.factory';\nimport { HotspotInterface } from '@mediaman/three-sixty/dist/interfaces/hotspot.interface';\nimport { ConfigurationInterface } from '@mediaman/three-sixty/dist/interfaces/configuration.interface';\nimport { ImageSetInterface } from '@mediaman/three-sixty/dist/interfaces/image-set.interface';\nimport ThreeSixty from '@mediaman/three-sixty';\n\n@Component({\n    selector: 'mm-three-sixty',\n    styles: ['.three-sixty-container{position:relative;cursor:move;cursor:-webkit-grab;-ms-touch-action:none;touch-action:none}.three-sixty__hotspot{display:none;position:absolute;width:200px;padding:10px 15px;background:rgba(0,0,0,.5);border-radius:20px;color:#fff}.three-sixty__hotspot--active{display:block}'],\n    template: `<canvas #canvasElement class=\"mm-three-sixty\" [width]=\"width\" [height]=\"height\"></canvas>`,\n    encapsulation: ViewEncapsulation.None\n})\nexport class ThreeSixtyComponent implements OnInit, OnChanges {\n\n    /**\n     * The canvas width\n     */\n    @Input() public width: number;\n\n    /**\n     * The canvas height\n     */\n    @Input() public height: number;\n\n    /**\n     * Total amount of angles\n     */\n    @Input() public angles: number;\n\n    /**\n     * Amount of angles per image\n     */\n    @Input() public anglesPerImage: number;\n\n    /**\n     * The initial angle to show (number between 0 and 360)\n     */\n    @Input() public startAngle: number = 0;\n\n    /**\n     * Image set with all (ordered) image urls\n     */\n    @Input() public images: ImageSetInterface = {};\n\n    /**\n     * The factor which increases the drag speed\n     * Default to 5\n     */\n    @Input() public speedFactor: number;\n\n    /**\n     * Array of hotspots\n     */\n    @Input() public hotspots: HotspotInterface[];\n\n    /**\n     * Flag to control if all images should be preloaded\n     */\n    @Input() public preload: boolean = false;\n\n    /**\n     * Gets emitted when the images were preloaded\n     */\n    @Output() public preloaded: EventEmitter<null> = new EventEmitter();\n\n    /**\n     * The canvas element reference\n     */\n    @ViewChild('canvasElement') private canvasElement: ElementRef;\n\n    /**\n     * The three sixty instance\n     */\n    private threeSixty: ThreeSixty;\n\n    /**\n     * @param threeSixtyFactory\n     */\n    public constructor(private threeSixtyFactory: ThreeSixtyFactory) {\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public ngOnInit() {\n        this.threeSixty = this.threeSixtyFactory.create(this.canvasElement.nativeElement, this.getThreeSixtyConfiguration());\n\n        this.threeSixty.initialize(this.images, this.startAngle);\n\n        this.preloadImages();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public ngOnChanges(changes: SimpleChanges) {\n        if (!this.threeSixty) {\n            return;\n        }\n\n        // Don't update the configuration if only the images have been changed\n        const changedProperties = Object.keys(changes);\n        if (changedProperties.length > 1 || !changes.hasOwnProperty('images')) {\n            this.threeSixty.updateConfiguration(this.getThreeSixtyConfiguration());\n        }\n\n        if (changes.hasOwnProperty('images')) {\n            this.threeSixty.updateImages(this.images);\n            this.preloadImages();\n        }\n    }\n\n    /**\n     * Force a preload of all images\n     */\n    public forcePreload() {\n        this.threeSixty.preload().then(() => this.preloaded.emit());\n    }\n\n    /**\n     * Preload all images if the preload flag is set\n     */\n    private preloadImages() {\n        if (this.preload) {\n            this.threeSixty.preload().then(() => this.preloaded.emit());\n        }\n    }\n\n    /**\n     * Get the configuration object for the ThreeSixty instance\n     */\n    private getThreeSixtyConfiguration(): ConfigurationInterface {\n        const configuration: ConfigurationInterface = {\n            angles: this.angles,\n            anglesPerImage: this.anglesPerImage\n        };\n\n        if (this.speedFactor >= 0) {\n            configuration.speedFactor = this.speedFactor;\n        }\n\n        if (this.hotspots) {\n            configuration.hotspots = this.hotspots;\n        }\n        return configuration;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { ThreeSixtyComponent } from './three-sixty.component';\nimport { ThreeSixtyFactory } from './three-sixty.factory';\n\n@NgModule({\n    declarations: [ThreeSixtyComponent],\n    providers: [ThreeSixtyFactory],\n    exports: [ThreeSixtyComponent]\n})\nexport class ThreeSixtyModule {\n}\n"],"names":["EventEmitter","Component","ViewEncapsulation","Input","Output","ViewChild","NgModule"],"mappings":"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"}